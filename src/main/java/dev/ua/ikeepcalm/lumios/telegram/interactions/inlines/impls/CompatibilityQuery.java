package dev.ua.ikeepcalm.lumios.telegram.interactions.inlines.impls;

import dev.ua.ikeepcalm.lumios.telegram.core.annotations.BotInlineQuery;
import dev.ua.ikeepcalm.lumios.telegram.interactions.inlines.InlineQuery;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResult;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle;

import java.util.Random;

@Component
@BotInlineQuery(inlineQuery = "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ —Å—É–º—ñ—Å–Ω–∏–π —ñ–∑ <—Ç–≤–æ—è —Ä—ñ—á> ?")
public class CompatibilityQuery implements InlineQuery {

    private final String[] emojis = {"üòä", "üöÄ", "üåü", "üéâ", "üëæ", "üíª", "üìö", "üé®"};
    private final String[] strings = {"—Ä–∏–∂–æ—é –º–∞–≤–ø–æ—é", "–º–æ–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è Java", "—É—Å–ø—ñ—à–Ω–∏–º –∂–∏—Ç—Ç—è–º", "—Å–ø–µ–∫–æ—é 40 –≥—Ä–∞–¥—É—Å—ñ–≤", "–ø—ñ—Ü–æ—é –∑ –∞–Ω–∞–Ω–∞—Å–æ–º", "–ø—Ä–æ–≥—Ä–∞–º–æ—é Microsoft Excel"};

    public InlineQueryResult processUpdate(Update update) {
        String query = update.getInlineQuery().getQuery();
        if (query.isBlank()) {
            String randomString = getRandomString();
            return InlineQueryResultArticle.builder()
                    .id("compatibility")
                    .title("–ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ —Å—É–º—ñ—Å–Ω–∏–π —ñ–∑ " + randomString + "?")
                    .description("–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è, –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –≤–∏ —Å—É–º—ñ—Å–Ω—ñ –∑ –≤–∞—à–æ—é —Ä—ñ—á—á—é (–∞–±–æ –ª—é–¥–∏–Ω–æ—é, —Ö—ñ-—Ö—ñ)!")
                    .inputMessageContent(InputTextMessageContent.builder()
                            .messageText("–í–∏ —ñ–∑ " + randomString + " –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É –Ω–∞ " + (new Random().nextInt(100) + 1) + "% " + getRandomEmoji())
                            .build())
                    .build();
        } else {
            return InlineQueryResultArticle.builder()
                    .id("compatibility")
                    .thumbnailUrl("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR5UECHdmuFUHHT7Nc_1mty8G6T1SUiAfKcbw&s")
                    .title("–ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ —Å—É–º—ñ—Å–Ω–∏–π —ñ–∑ " + query + "?")
                    .description("–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è, –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –≤–∏ —Å—É–º—ñ—Å–Ω—ñ –∑ –≤–∞—à–æ—é —Ä—ñ—á—á—é (–∞–±–æ –ª—é–¥–∏–Ω–æ—é, —Ö—ñ-—Ö—ñ)!")
                    .inputMessageContent(InputTextMessageContent.builder()
                            .messageText("–í–∏ —ñ–∑ " + query + " –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É –Ω–∞ " + (new Random().nextInt(100) + 1) + "% " + getRandomEmoji())
                            .build())
                    .build();
        }
    }

    private String getRandomEmoji() {
        Random random = new Random();
        return emojis[random.nextInt(emojis.length)];
    }

    private String getRandomString() {
        Random random = new Random();
        return strings[random.nextInt(strings.length)];
    }

}
